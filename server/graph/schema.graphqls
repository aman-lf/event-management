# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  name: String!
  email: String!
  phoneNo: String!
}

type Event {
  id: ID!
  name: String!
  startDate: String!
  endDate: String!
  location: String!
  type: String
  description: String
}

type Participant {
  id: ID!
  userId: ID!
  user: User!
  eventId: ID!
  event: Event!
  role: String!
}

type Expense {
  id: ID!
  itemName: String!
  cost: Int!
  description: String
  type: String!
  eventID: ID!
  event: Event!
}

type Activity {
  id: ID!
  name: String!
  startTime: String!
  endTime: String!
  description: String
  eventID: ID!
  event: Event!
}

input UserFilter {
  id: ID
  name: String
  email: String
  phoneNo: String
}

input EventFilter {
  id: ID
  name: String
  startDate: String
  endDate: String
  location: String
  type: String
}

input ParticipantFilter {
  id: ID
  userId: String
  role: String
}

input ExpenseFilter {
  id: ID
  itemName: String
  type: String
}

input ActivityFilter {
  id: ID
  name: String
  startTime: String
  endTime: String
  eventID: ID
}

input Pagination {
  limit: Int = 20
  offset: Int = 0
  sortBy: String
  sortOrder: String
}

type Query {
  user(filter: UserFilter, pagination: Pagination): [User!]!
  event(filter: EventFilter, pagination: Pagination): [Event!]!
  participant(
    eventId: ID!
    filter: ParticipantFilter
    pagination: Pagination
  ): [Participant!]!
  expense(
    eventId: ID!
    filter: ExpenseFilter
    pagination: Pagination
  ): [Expense!]!
  activity(filter: ActivityFilter, pagination: Pagination): [Activity!]!
}

input NewEvent {
  name: String!
  startDate: String!
  endDate: String!
  location: String!
  type: String
  description: String
}

input NewUser {
  name: String!
  email: String!
  phoneNo: String
}

input NewParticipant {
  userId: Int!
  eventId: Int!
  role: String!
}

input NewActivity {
  name: String!
  startTime: String!
  endTime: String!
  description: String
  eventId: Int!
}

input NewExpense {
  itemName: String!
  cost: Int!
  description: String
  type: String!
  eventID: Int!
}

input UpdateUser {
  name: String
  email: String
  phoneNo: String
}

input UpdateEvent {
  name: String
  startDate: String
  endDate: String
  location: String
  type: String
  description: String
}

input UpdateParticipant {
  userId: Int
  eventId: Int
  role: String
}

input UpdateActivity {
  name: String
  startTime: String
  endTime: String
  description: String
  eventId: Int
}

input UpdateExpense {
  itemName: String
  cost: Int
  description: String
  type: String
  eventID: Int
}

type Mutation {
  createUser(input: NewUser!): User!
  createEvent(input: NewEvent!): Event!
  createParticipant(input: NewParticipant!): Participant!
  createActivity(input: NewActivity!): Activity!
  createExpense(input: NewExpense!): Expense!

  updateUser(id: ID!, input: UpdateUser!): User!
  deleteUser(id: ID!): Boolean!

  updateEvent(id: ID!, input: UpdateEvent!): Event!
  deleteEvent(id: ID!): Boolean!

  updateParticipant(id: ID!, input: UpdateParticipant!): Participant!
  deleteParticipant(id: ID!): Boolean!

  updateActivity(id: ID!, input: UpdateActivity!): Activity!
  deleteActivity(id: ID!): Boolean!

  updateExpense(id: ID!, input: UpdateExpense!): Expense!
  deleteExpense(id: ID!): Boolean!
}
