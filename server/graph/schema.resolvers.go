package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/aman-lf/event-management/controller"
	"github.com/aman-lf/event-management/graph/model"
)

// Event is the resolver for the event field.
func (r *activityResolver) Event(ctx context.Context, obj *model.Activity) (*model.Event, error) {
	return controller.GetEventByIdHandler(ctx, obj.EventID)
}

// Event is the resolver for the event field.
func (r *expenseResolver) Event(ctx context.Context, obj *model.Expense) (*model.Event, error) {
	return controller.GetEventByIdHandler(ctx, obj.EventID)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return controller.CreateUserHandler(ctx, input)
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	return controller.CreateEventHandler(ctx, input)
}

// CreateParticipant is the resolver for the createParticipant field.
func (r *mutationResolver) CreateParticipant(ctx context.Context, input model.NewParticipant) (*model.Participant, error) {
	return controller.CreateParticipantHandler(ctx, input)
}

// CreateActivity is the resolver for the createActivity field.
func (r *mutationResolver) CreateActivity(ctx context.Context, input model.NewActivity) (*model.Activity, error) {
	return controller.CreateActivityHandler(ctx, input)
}

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	return controller.CreateExpenseHandler(ctx, input)
}

// User is the resolver for the user field.
func (r *participantResolver) User(ctx context.Context, obj *model.Participant) (*model.User, error) {
	return controller.GetUserByIdHandler(ctx, obj.UserId)
}

// Event is the resolver for the event field.
func (r *participantResolver) Event(ctx context.Context, obj *model.Participant) (*model.Event, error) {
	return controller.GetEventByIdHandler(ctx, obj.EventID)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, filter *model.UserFilter, pagination *model.Pagination) ([]*model.User, error) {
	return controller.GetUsersHandler(ctx, filter, pagination)
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, filter *model.EventFilter, pagination *model.Pagination) ([]*model.Event, error) {
	return controller.GetEventsHandler(ctx, filter, pagination)
}

// Participant is the resolver for the participant field.
func (r *queryResolver) Participant(ctx context.Context, filter *model.ParticipantFilter, pagination *model.Pagination) ([]*model.Participant, error) {
	return controller.GetParticipantHandler(ctx, filter, pagination)
}

// Expense is the resolver for the expense field.
func (r *queryResolver) Expense(ctx context.Context, filter *model.ExpenseFilter, pagination *model.Pagination) ([]*model.Expense, error) {
	return controller.GetExpenseHandler(ctx, filter, pagination)
}

// Activity is the resolver for the activity field.
func (r *queryResolver) Activity(ctx context.Context, filter *model.ActivityFilter, pagination *model.Pagination) ([]*model.Activity, error) {
	return controller.GetActivityHandler(ctx, filter, pagination)
}

// Activity returns ActivityResolver implementation.
func (r *Resolver) Activity() ActivityResolver { return &activityResolver{r} }

// Expense returns ExpenseResolver implementation.
func (r *Resolver) Expense() ExpenseResolver { return &expenseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Participant returns ParticipantResolver implementation.
func (r *Resolver) Participant() ParticipantResolver { return &participantResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type activityResolver struct{ *Resolver }
type expenseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type participantResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
